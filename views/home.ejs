<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ΑΣΚΗΣΙΣ</title>
  <link rel="stylesheet" href="/c.css">
  <script src="/misc.js" defer></script>
</head>
<body>
  <header>
    <h1>Η ΑΣΚΗΣΙΣ</h1>
    <p><q>πλέονες ἐξ ἀσκήσιος ἀγαθοί γίνονται ἤ ἀπὸ φύσιος.</q> <span>—Δημόκριτος</span></p>
  </header>

  <main>
    <h2>χαῖρε!</h2>
    <%
    // Only display the form if nothing has been logged yet for today.
    if (todaysPractice.logged === false) {
    %>
    <form action="/" method="POST">
      
      <h3>ἤσκησας σήμερον;</h3>
      <div>
        <input type="radio" name="practiced" id="practiced-true" value="true">
        <label for="practiced-true"><strong>Ναί</strong>, ἤσκησα!</label>
      </div>

      <div>
        <input type="radio" name="practiced" id="practiced-false" value="false">
        <label for="practiced-false"><strong>Οὐχί</strong>, οὐκ ἤσκησα σήμερον.</label>
      </div>

      <div>
        <label for="note">Τὶ ἐποίησας;</label>
        <textarea name="note" id="note" maxlength="100"></textarea>
      </div>

      <button type="submit">προπέμπειν</button>
    </form>
    <% 
    } 

    let streakString;
    if (streak === 0) {
      streakString = "Time to start a new streak!";
    } else if (streak === 1) {
      streakString = "You're at the start of a new streak. Keep it going!";
    } else {
      streakString = "You've practiced for <strong>" + streak + " days</strong> in a row. Keep it up!";
    }
    %>
    <p><%- streakString %></p>

    <%
    // [1] Get the date objects we'll need.

    const today = new Date();
    const monthToDisplay = new Date(practices.year, practices.month - 1, 1);

    // [2] Find starting date and total size of monthly calendar.

    // Find the starting day by subtracting the index of
    // the first day from the current date.
    const nextDayToCreate = new Date(monthToDisplay);
    nextDayToCreate.setDate(monthToDisplay.getDate() - monthToDisplay.getDay());

    // Find the total size by finding the next multiple of seven
    // beyond the number of the days we already know we need.
    const daysInMonth = new Date(monthToDisplay.getFullYear(), monthToDisplay.getMonth() + 1, 0).getDate();
    const daysNeededSoFar = monthToDisplay.getDay() + daysInMonth;
    const totalDaysToCreate = Math.ceil(daysNeededSoFar / 7) * 7;

    // [3] Build a calendar array

    const calendar = [];

    // As we build the array, we're going to check each day against our database.
    let nextRecordIndex = 0;
    let nextRecord = practices.records[nextRecordIndex];

    // For each day we need to create:
    for (let i = 0; i < totalDaysToCreate; i++) {
      // Build date string (manually to avoid accidental
      // time zone changes that come with int'l methods)
      const year = nextDayToCreate.getFullYear();
      const month = (nextDayToCreate.getMonth() + 1).toString().padStart(2, "0");
      const day = nextDayToCreate.getDate().toString().padStart(2, "0");
      const dateString = `${year}-${month}-${day}`;

      // Build an object with this day's information.
      const calendarDay = {};

      calendarDay.fullDate = dateString;
      calendarDay.day = nextDayToCreate.getDate();

      // If we're in the selected month, add practice records:
      if (nextDayToCreate.getMonth() === monthToDisplay.getMonth()) {
        calendarDay.thisMonth = true;

        // If have a database record for today, use it.
        if (nextRecord && dateString === nextRecord.date) {
          calendarDay.practiced = nextRecord.practiced;
          calendarDay.note = nextRecord.note;
  
          // And update the next record.
          nextRecordIndex++;
          nextRecord = practices.records[nextRecordIndex];
        } else if (nextDayToCreate < today.setHours(0, 0, 0, 0)) {
          // If we have no record and the date is past:
          calendarDay.practiced = false;
        }
      }

      // Add the day to the calendar.
      calendar.push(calendarDay);

      // Increment the day
      nextDayToCreate.setDate(nextDayToCreate.getDate() + 1);
    }

    // [4] Print the calendar.

    // E.g., "June 2024"
    const currentMonth = monthToDisplay.toLocaleString('default', { month: 'long', year: 'numeric' });

    const lastMonth = new Date(monthToDisplay);
    lastMonth.setMonth(monthToDisplay.getMonth() - 1);
    const nextMonth = new Date(monthToDisplay);
    nextMonth.setMonth(monthToDisplay.getMonth() + 1);

    // E.g., "/2024/05"
    const lastMonthUrl = `/${lastMonth.getFullYear()}/${(lastMonth.getMonth() + 1).toString().padStart(2, "0")}`;
    const nextMonthUrl = `/${nextMonth.getFullYear()}/${(nextMonth.getMonth() + 1).toString().padStart(2, "0")}`;
    %>
    <h3 class="calendar-heading">
      <a href="<%= lastMonthUrl %>">«</a>
        <%= currentMonth %>
      <a href="<%= nextMonthUrl %>">»</a>
    </h3>
    <ol class="calendar">
      <% 
      // For each item in the calendar array
      for (let i = 0; i < calendar.length; i++) {
        // Define the necessary styles.
        let css;
        if (calendar[i].practiced === true) {
          css = ' class="practiced"';
        } else if (calendar[i].practiced === false) {
          css = ' class="skipped"';
        }

        if (calendar[i].thisMonth !== true) {
          css = ' class="not-this-month"';
        }

        // Add a note marker if necessary.
        let note;
        if (calendar[i].note) {
          note = `<img src="/img/note.svg" alt="[Practice note]" title="${calendar[i].note}">`;
        }

        // And print a list item.
      %>
        <li data-date="<%= calendar[i].fullDate %>"<%- css %>><%- note %><%= calendar[i].day %></li>
      <% } %>
    </ol>
    <div class="editNote-div">
    </div>
  </main>
</body>
</html>