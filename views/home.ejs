<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ΑΣΚΗΣΙΣ</title>
  <link rel="stylesheet" href="/c.css">
  <script src="/misc.js" defer></script>
</head>
<body>
  <header>
    <h1>Η ΑΣΚΗΣΙΣ</h1>
    <p><q>πλέονες ἐξ ἀσκήσιος ἀγαθοί γίνονται ἤ ἀπὸ φύσιος.</q> <span>—Δημόκριτος</span></p>
  </header>

  <main>
    <h2>χαῖρε!</h2>
    <%
    // Only display the form if nothing has been logged yet for today.
    if (todaysPractice.logged === false) {
    %>
    <form action="/" method="POST">
      
      <h3>ἤσκησας σήμερον;</h3>
      <div>
        <input type="radio" name="practiced" id="practiced-true" value="true">
        <label for="practiced-true"><strong>Ναί</strong>, ἤσκησα!</label>
      </div>

      <div>
        <input type="radio" name="practiced" id="practiced-false" value="false">
        <label for="practiced-false"><strong>Οὐχί</strong>, οὐκ ἤσκησα σήμερον.</label>
      </div>

      <div>
        <label for="note">Τὶ ἐποίησας;</label>
        <textarea name="note" id="note" maxlength="100"></textarea>
      </div>

      <button type="submit">προπέμπειν</button>
    </form>
    <% 
    } 

    let streakString;
    if (streak === 0) {
      streakString = "Time to start a new streak!";
    } else if (streak === 1) {
      streakString = "You're at the start of a new streak. Keep it going!";
    } else {
      streakString = "You've practiced for <strong>" + streak + " days</strong> in a row. Keep it up!";
    }
    %>
    <p><%- streakString %></p>

    <%
    // Get a date object for the current day and the month we need to display.
    const today = new Date();
    const monthToDisplay = new Date();
    monthToDisplay.setYear(practices.year);
    monthToDisplay.setMonth(practices.month - 1);

    // We're going to keep our calendar information in an array.
    const calendar = [];

    // 1. ADD THE TRAILING DAYS OF THE PREVIOUS MONTH
    // To calculate this, we need to know what weekday this month 
    // started on and how many days were in last month.

    const firstDayOfTheMonth = new Date(monthToDisplay.getFullYear(), monthToDisplay.getMonth(), 1).getDay();
    const daysInLastMonth = new Date(monthToDisplay.getFullYear(), monthToDisplay.getMonth(), 0).getDate();
    const calendarStart = daysInLastMonth - firstDayOfTheMonth + 1; // adjusted for index

    // For the dataset, we need a string in the format `YYYY-MM-DD`. 
    // Get the month and year, pad the month with a zero, and build the string.
    const lastMonth = new Date(monthToDisplay.getFullYear(), monthToDisplay.getMonth() - 1);
    const lastMonthString = (lastMonth.getMonth() + 1).toString().padStart(2, "0");
    const lastMonthDateString = `${lastMonth.getFullYear()}-${lastMonthString}-`;

    for (let i = calendarStart; i <= daysInLastMonth; i++) {
      calendar.push({ fullDate: `${lastMonthDateString}${i.toString().padStart(2, "0")}`, day: i, thisMonth: false });
    }

    // 2. ADD THE DAYS OF THE SELECTED MONTH
    // Get the number of days in the month and build a date string.

    let daysInThisMonth = new Date(monthToDisplay.getFullYear(), monthToDisplay.getMonth() + 1, 0).getDate();
    const thisMonthString = (monthToDisplay.getMonth() + 1).toString().padStart(2, "0");
    const thisMonthDateString = `${monthToDisplay.getFullYear()}-${thisMonthString}-`;

    // As we build the array, we're going to check each day against our database.
    // Set up some variables to track the next database record we have to check.
    let nextRecordIndex;
    let nextRecord;
    if (practices.records.length === 0) {
      // If there are no records from this month, set the record to empty.
      nextRecord = { day: 0 };
    } else {
      // Otherwise, cue up the first record.
      nextRecordIndex = 0;
      nextRecord = practices.records[nextRecordIndex];
    }

    // For each day of the selected month:
    for (let i = 1; i <= daysInThisMonth; i++) {
      const thisDate = new Date(monthToDisplay.getFullYear(), monthToDisplay.getMonth(), i, 23, 59, 59);
      const dayString = i.toString().padStart(2, "0");
      const dateString = `${thisMonthDateString}${dayString}`;

      // Start building the object
      // Q: Should this sort of work be done with a `today` class? 
      const todayInfo = {
        fullDate: `${dateString}`,
        day: i,
        thisMonth: true,
      };

      // If we've got a record for today, add its information...
      if (nextRecord.date === dateString) {
        todayInfo.practiced = nextRecord.practiced;
        todayInfo.note = nextRecord.note;

        // ...and update our next record info, if other records exist.
        if (practices.records.length > nextRecordIndex + 1) {
          nextRecordIndex++;
          nextRecord = practices.records[nextRecordIndex];
        }
      } else if (thisDate < today) {  
        // If there's no record and the day is in the past,
        // mark that the student hasn't practiced.
        todayInfo.practiced = false;
      } 
      
      // Add the object to the calendar array.
      calendar.push(todayInfo);
    }

    // 3. ADD STARTING DAYS OF FOLLOWING MONTH

    // We need the total days in our calendar to be a multiple of seven.
    let lengthSoFar = calendar.length;  
    let totalDays = Math.ceil(lengthSoFar / 7) * 7; 

    // Format a date string for next month's dates
    const nextMonth = new Date(monthToDisplay.getFullYear(), monthToDisplay.getMonth() - 1);
    const nextMonthString = (nextMonth.getMonth() + 1).toString().padStart(2, "0");
    const nextMonthDateString = `${nextMonth.getFullYear()}-${nextMonthString}-`;

    // For each day we need to display
    for (let i = 1; i <= totalDays - lengthSoFar; i++) {
      // Add the day to the calendar
      calendar.push({ fullDate: `${nextMonthDateString}${i.toString().padStart(2, "0")}`, day: i, thisMonth: false });
    }

    const lastMonthUrl = `/${lastMonth.getFullYear()}/${lastMonthString}`;
    const nextMonthUrl = `/${nextMonth.getFullYear()}/${nextMonthString}`;
    %>
    <h3 class="calendar-heading">
      <a href="<%= lastMonthUrl %>">«</a>
        <%= monthToDisplay.toLocaleString('default', { month: 'long', year: 'numeric' }); %>
      <a href="<%= nextMonthUrl %>">»</a>
    </h3>
    <ol class="calendar">
      <% 
      // For each item in the calendar array
      for (let i = 0; i < calendar.length; i++) {
        // Define the necessary styles.
        let css;
        if (calendar[i].practiced === true) {
          css = ' class="practiced"';
        } else if (calendar[i].practiced === false) {
          css = ' class="skipped"';
        }

        if (calendar[i].thisMonth === false) {
          css = ' class="not-this-month"';
        }

        // Add a note marker if necessary.
        let note;
        if (calendar[i].note) {
          note = `<img src="/img/note.svg" alt="[Practice note]" title="${calendar[i].note}">`;
        }

        // And print a list item.
      %>
        <li data-date="<%= calendar[i].fullDate %>"<%- css %>><%- note %><%= calendar[i].day %></li>
      <% } %>
    </ol>
    <div class="editNote-div">
    </div>
  </main>
</body>
</html>